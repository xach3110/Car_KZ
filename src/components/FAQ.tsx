import { useState, useEffect, useRef } from "react";
import "../styles/FAQ.css";

const faqData = [
  {
    question: "–ú–æ–∂–µ—Ç –ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –≤ –¥–æ–≥–æ–≤–æ—Ä–µ?",
    answer: "–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ—ç—Ç–æ–º—É –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –¥–æ–≥–æ–≤–æ—Ä–µ. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –∑–∞—Ç—Ä–∞—Ç—ã, –∏ –≤—Å—ë —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –¥–æ–≥–æ–≤–æ—Ä–µ. –í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ–π —Å—É–º–º—ã. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —á–µ—Å—Ç–Ω—ã–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.",
  },
  {
    question: "–ö–∞–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏ —Ç–æ–≥–æ, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –±—ã–ª —É—Ç–æ–ø–ª–µ–Ω–Ω—ã–º?",
    answer: "–ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–æ–¥–∏–º —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π.",
  },
  {
    question: "–ö–∞–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π?",
    answer: "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π. –¢–∞–∫–∂–µ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –∏–ª–∏ –≤–æ–≤—Å–µ –±–µ–∑ –Ω–∏—Ö.",
  },
  {
    question: "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ –ø–æ–¥ –∫–ª—é—á —É –Ω–∞—Å?",
    answer: "–≠—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —É—Å–ª—É–≥–∞, –≤–∫–ª—é—á–∞—é—â–∞—è –ø–æ–¥–±–æ—Ä, –ø–æ–∫—É–ø–∫—É, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.",
  },
  {
    question: "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –°–®–ê?",
    answer: "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤–∫–ª—é—á–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω—É—é –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é, –¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.",
  },
];

const FAQSection = () => {
  const [openIndex, setOpenIndex] = useState<number | null>(null);
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [question, setQuestion] = useState("");

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ ref –¥–ª—è —Å–µ–∫—Ü–∏–∏
  const sectionRef = useRef<HTMLElement>(null);
  const [animate, setAnimate] = useState(false);

  const botToken = "7877422434:AAHjowjGiF21-qENdDt_Fsiu_IOWANYQmw8"; // –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  const chatId = "-4794025014"; // –¢–≤–æ–π chat_id

  const toggleQuestion = (index: number) => {
    setOpenIndex(openIndex === index ? null : index);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const text = `‚ùì *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ FAQ!*\n\nüë§ *–ò–º—è:* ${name}\nüìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}\nüí¨ *–í–æ–ø—Ä–æ—Å:* ${question}`;

    try {
      const response = await fetch(
        `https://api.telegram.org/bot${botToken}/sendMessage`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: chatId,
            text: text,
            parse_mode: "Markdown",
          }),
        }
      );

      const data = await response.json();
      if (data.ok) {
        alert("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
        setName("");
        setPhone("");
        setQuestion("");
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  };

  // IntersectionObserver –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—ã–µ–∑–¥–∞ FAQ
  useEffect(() => {
    const observerCallback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          setAnimate(true);
          observer.disconnect();
        }
      });
    };

    const observerOptions = { threshold: 0.2 };
    const observer = new IntersectionObserver(observerCallback, observerOptions);
    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }
    return () => observer.disconnect();
  }, []);

  return (
    <section
      ref={sectionRef}
      className={`faq-section ${animate ? "animate slide-up" : ""}`}
    >
      <div className="partners-header">
        <h2 className="partners-title">–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
        <p className="partners-subtitle">–ù–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
      </div>
      <div className="faq-container">
        {/* –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ */}
        <div className="faq-list">
          {faqData.map((item, index) => (
            <div
              key={index}
              className={`faq-item ${openIndex === index ? "open" : ""}`}
            >
              <button className="faq-question" onClick={() => toggleQuestion(index)}>
                {item.question}
                <span className={`arrow ${openIndex === index ? "rotated" : ""}`}>
                  &#9662;
                </span>
              </button>
              <div className="faq-answer-wrapper">
                <div className="faq-answer-content">
                  <p className="faq-answer">{item.answer}</p>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* –§–æ—Ä–º–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ */}
        <form className="faq-form" onSubmit={handleSubmit}>
          <p className="string">–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã</p>
          <input
            type="text"
            placeholder="–ò–º—è"
            className="faq-input"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
          <input
            type="tel"
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
            className="faq-input"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            required
          />
          <textarea
            placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å"
            className="faq-textarea"
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            required
          />
          <button type="submit" className="faq-submit">
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </form>
      </div>
    </section>
  );
};

export default FAQSection;
