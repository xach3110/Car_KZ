import { useRef, useEffect, useState } from "react";
import "../styles/CalculatedCar.css";
import Man from "../assets/image_man.png";

export default function CalculationForm() {
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [animate, setAnimate] = useState(false);
  const sectionRef = useRef<HTMLElement>(null);

  const botToken = "7877422434:AAHjowjGiF21-qENdDt_Fsiu_IOWANYQmw8"; // –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  const chatId = "1039289071"; // –¢–≤–æ–π chat_id

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã

    const text = `üì© *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–±–æ—Ä –∞–≤—Ç–æ!*\n\nüë§ *–ò–º—è:* ${name}\nüìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}`;

    try {
      const response = await fetch(
        `https://api.telegram.org/bot${botToken}/sendMessage`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: chatId,
            text: text,
            parse_mode: "Markdown",
          }),
        }
      );

      const data = await response.json();
      if (data.ok) {
        alert("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
        setName("");
        setPhone("");
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–µ–∑–¥–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏
  useEffect(() => {
    const observerCallback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          setAnimate(true);
          observer.disconnect();
        }
      });
    };

    const observerOptions = { threshold: 0.2 };
    const observer = new IntersectionObserver(observerCallback, observerOptions);
    if (sectionRef.current) observer.observe(sectionRef.current);

    return () => observer.disconnect();
  }, []);

  return (
    <section
      ref={sectionRef}
      className={`calc-section ${animate ? "animate slide-up" : ""}`}
    >
      {/* –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–µ–≤–∞, –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø—Ä–∞–≤–∞ */}
      <div className="calc-header">
        <h2 className="calc-title">–ü–æ–¥–±–æ—Ä –∏ –ø—Ä–æ—Å—á–µ—Ç</h2>
        <p className="calc-subtitle">
          –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–±–æ—Ä–∫–∏ –∞–≤—Ç–æ –ø–æ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç
        </p>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –§–æ—Ä–º–∞ —Å–ª–µ–≤–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ø—Ä–∞–≤–∞ */}
      <div className="calc-container">
        <form className="calc-left" onSubmit={handleSubmit}>
          <label className="calc-label" htmlFor="name">
            –ò–º—è
          </label>
          <input
            id="name"
            type="text"
            className="calc-input"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />

          <label className="calc-label" htmlFor="phone">
            –¢–µ–ª–µ—Ñ–æ–Ω
          </label>
          <input
            id="phone"
            type="text"
            className="calc-input"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            required
          />

          <button type="submit" className="calc-button">
            –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ
          </button>
        </form>

        <div className="calc-right">
          <img src={Man} alt="Placeholder" className="calc-image" />
        </div>
      </div>
    </section>
  );
}
